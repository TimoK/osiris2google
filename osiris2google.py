from __future__ import print_functionimport httplib2import os# Beta version of Osiris2Google# Authors: Simon Sprengers, Timo Koppenberg# Most of the code is directly copied from osiris2ical:#!/usr/bin/env python -W ignore::DeprecationWarning#          Authors: Hiram (  hiram_ AT g m x DOT n e t   ), Mathijs Henquet (mathijs.henquet@gmail.com)#		   Website: http://gitorious.org/osiris2ical#more#          License: GPL v3 or later  (http://www.fsf.org/licensing/licenses/agpl-3.0.html)        #          Dependencies: Beautiful Soup (http://www.crummy.com/software/BeautifulSoup/)  Python License#                        Ical for python (http://pypi.python.org/pypi/icalendar/2.0.1)  LGPL#          Install: 1. Download depencies and install using "python setup.py install" in the map of the dependency#                   2. Drop this file somewhere and make sure it is chmodded to executeVERSION='1.0'from apiclient import discoveryimport oauth2clientfrom oauth2client import clientfrom oauth2client import toolsimport urllib2import urllibimport cookielibfrom BeautifulSoup import BeautifulSoup, Tag, NavigableStringfrom icalendar import Calendar, Event, Timezonefrom datetime import datetimeimport os.pathimport reimport timeimport sysimport getpassfrom optparse import OptionParsermonthnames = ['Januari',               'Februari',               'Maart',               'April',               'Mei',               'Juni',               'Juli',               'Augustus',               'September',               'Oktober',               'November',               'December']    def main():    usage = "usage: %prog <username>"    version = "version: " + VERSION    parser = OptionParser(usage, version=version)    (options, args) = parser.parse_args()        if len(args) != 1:        parser.error("incorrect number of arguments")        username = args[0]    password = getpass.getpass()        page = getPage(username, password)    parsePage(page, username)                  def getPage(username, password):    #set up cookie handler    cj = cookielib.CookieJar()    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))    opener.addheaders = [('User-Agent', 'Mozilla/5.0 (Roosterdata spider, stelletje prutsers waarom moet ik dit zelf doen?)')]    urllib2.install_opener(opener)        # go to the start page    urllib2.urlopen('https://www.osiris.universiteitutrecht.nl/osistu_ospr/StartPagina.do')    # go to the login page    urllib2.urlopen('https://www.osiris.universiteitutrecht.nl/osistu_ospr/Personalia.do')    #login request, geeft ons een cookie    loginrequest = urllib2.Request(        'https://www.osiris.universiteitutrecht.nl/osistu_ospr/AuthenticateUser.do',         urllib.urlencode({            'VB_gebruikersNaam' : username,            'VB_wachtWoord' : password ,            'event' : 'login'        })    )    page = urllib2.urlopen(loginrequest)    #check of we wel echt zijn ingelogged    #if not checkLoggedIn(page):    #    print('De ingevoerde inloggegevens kloppen niet!')    #    sys.exit(2)        rooster_url = 'https://www.osiris.universiteitutrecht.nl/osistu_ospr/KiesRooster.do'        #open de rooster pagina    page = urllib2.urlopen(rooster_url)        #vind de requestToken en open het totaalrooster    requestToken = BeautifulSoup(page).find('input', id="requestToken")['value']    postvalues = {        'event' : 'toonTotaalrooster',         'requestToken': requestToken    }     datarequest = urllib2.Request(rooster_url, urllib.urlencode(postvalues))    page = urllib2.urlopen(datarequest)    return pagedef checkLoggedIn(page):    soup = BeautifulSoup(page)    return soup.find(text=re.compile("Laatst ingelogd")) != Nonedef parsePage(page, username):    soup = BeautifulSoup(page)    #print(soup.prettify())      geroosterd = soup.find('span', id="RoosterIngeroosterd0").find('table', "OraTableContent")    ingeloggedstring = soup.find(text=re.compile("Laatst ingelogd"))    m = re.search('(\d{4})',ingeloggedstring)    jaar = int(m.group(0))    #print 'Niet geroosterd'    #print soup('span', id="RoosterNietIngeroosterd0")[0].find('table', "x1h")                    #get the data out and into the calendar    maand = 0    dag = 0		#Much code borrowed from GoogleAPI quickstart    credentials = get_credentials()    http = credentials.authorize(httplib2.Http())    service = discovery.build('calendar', 'v3', http=http)           page_token = None    existsAlready = False    workingCalendar = None	    CalendarName = 'Osiris Rooster'    while True:        calendar_list = service.calendarList().list(pageToken=page_token).execute()        for calendar_list_entry in calendar_list['items']:            if calendar_list_entry['summary'] == CalendarName:                print('Calendar exists already')                CalendarID = calendar_list_entry['id']                #existsAlready = True                #service.calendars().clear(calendar_list_entry['id']).execute()                #workingCalendar = calendar_list_entry        page_token = calendar_list.get('nextPageToken')        if not page_token:            break    service.calendars().delete(calendarId=CalendarID).execute()    if existsAlready == False:          print('Inserting new calendar')         calendar = {        'summary': 'Osiris Rooster',        'timeZone': 'Europe/Amsterdam'        }        created_calendar = service.calendars().insert(body=calendar).execute()        print(created_calendar['id'])        workingCalendar = created_calendar	    for tr in geroosterd:        if tr.contents[0].contents[0].name == 'table':            #get the day            dag = int(tr.contents[0].tr.contents[1].span.string) if len(tr.contents[0].tr.contents[1].span.string) > 1 else dag            #get the time            tijd = tr.contents[0].tr.contents[2].span.string            startuur = int(tijd[1:3])            startmin = int(tijd[4:6])            enduur = int(tijd[10:12])            endmin = int(tijd[13:15])            #get the other data            vakcode = tr.contents[1].span.string            naam = tr.contents[3].span.string            ctype = tr.contents[5].span.string            groep = tr.contents[7].span.string if tr.contents[7].span != None else ''            gebouw = tr.contents[9].a.string if tr.contents[9].a != None else ''            ruimte = tr.contents[11].span.string if tr.contents[11].span != None else ''            docent = tr.contents[13].span.string  if tr.contents[13].span != None else ''                          description = groep + '\n' if groep != '' else ''            description += 'docent: ' + docent if docent != '' else ''            # Make the event and add it directly to Google Calendar            event = {                'summary' : ctype + ' ' + naam,                'location': gebouw + ' ' + ruimte,                'description': description,                'start': {                    'dateTime':  str(jaar) + '-' + str(maand) + '-' + str(dag) + 'T' + str(startuur) + ':' + str(startmin) + ':00+02:00',                    'timeZone': 'Europe/Amsterdam',                },                'end': {                    'dateTime':  str(jaar) + '-' + str(maand) + '-' + str(dag) + 'T' + str(enduur) + ':' + str(endmin) + ':00+02:00',                    'timeZone': 'Europe/Amsterdam',                }            }            event = service.events().insert(calendarId=workingCalendar['id'], body=event).execute()        elif tr.contents[0].name == 'td':            #record the new month and check if we are in the next year              maand = monthnames.index(tr.contents[0].span.string) + 1            if maand == 1:                jaar = jaar + 1                # If modifying these scopes, delete your previously saved credentials# at ~/.credentials/calendar-python-quickstart.jsonSCOPES = 'https://www.googleapis.com/auth/calendar'CLIENT_SECRET_FILE = 'client_secret.json'APPLICATION_NAME = 'Google Calendar API Python Quickstart'def get_credentials():    """Gets valid user credentials from storage.    If nothing has been stored, or if the stored credentials are invalid,    the OAuth2 flow is completed to obtain the new credentials.    Returns:        Credentials, the obtained credential.    """    home_dir = os.path.expanduser('~')    credential_dir = os.path.join(home_dir, '.credentials')    if not os.path.exists(credential_dir):        os.makedirs(credential_dir)    credential_path = os.path.join(credential_dir,                                   'calendar-python-quickstart.json')    store = oauth2client.file.Storage(credential_path)    credentials = store.get()    if not credentials or credentials.invalid:        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)        flow.user_agent = APPLICATION_NAME        if flags:            credentials = tools.run_flow(flow, store, flags)        else: # Needed only for compatibility with Python 2.6            credentials = tools.run(flow, store)        print('Storing credentials to ' + credential_path)    return credentials    if __name__ == "__main__":    main()